'''


Triangle, pentagonal, and hexagonal numbers are generated by the following formulae:
Triangle 	  	Tn=n(n+1)/2 	  	1, 3, 6, 10, 15, ...
Pentagonal 	  	Pn=n(3n−1)/2 	  	1, 5, 12, 22, 35, ...
Hexagonal 	  	Hn=n(2n−1) 	  	1, 6, 15, 28, 45, ...

It can be verified that T285 = P165 = H143 = 40755.

Find the next triangle number that is also pentagonal and hexagonal.
'''

def makeTri(n):
    return int(n*(n+1)/2)

def makePent(n):
    return int(n*(3*n-1)/2)

def makeHex(n):
    return n*(2*n-1)

# checks for perfect square
# babylonian algorithm
def is_square(apositiveint):
    x = apositiveint // 2
    seen = set([x])
    while x * x != apositiveint:
        x = (x + (apositiveint // x)) // 2
        if x in seen: return [False, None]
        seen.add(x)
    return [True, x]

def isPent(n):
    test = is_square(n*24+1)
    if test[0]:
        if (test[1]+1)%6 ==0:
            return True
        else: return False
    else: return False
    
def isHex(n):
    test = is_square(n*8+1)
    if test[0]:
        if(test[1]+1)%4==0:
            return True
        else: return False
    else: return False

i = 286
while True:
    t = makeTri(i)
    if isHex(t) and isPent(t):
        print(isHex(t))
        print(isPent(t))
        break
    i+=1

print('The next number meeting the condition is {}, which is triangle number {}.'.format(makeTri(i),i))

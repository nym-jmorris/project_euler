'''

Pentagonal numbers are generated by the formula, Pn=n(3n−1)/2. The first ten pentagonal numbers are:

1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...

It can be seen that P4 + P7 = 22 + 70 = 92 = P8. However, their difference, 70 − 22 = 48, is not pentagonal.

Find the pair of pentagonal numbers, Pj and Pk, for which their sum and difference are pentagonal and D = |Pk − Pj| is minimised; what is the value of D?

'''

def makePent(number):
    return int(number*(3*number-1)/2)

def is_square(apositiveint):
    x = apositiveint // 2
    seen = set([x])
    while x * x != apositiveint:
        x = (x + (apositiveint // x)) // 2
        if x in seen: return [False, None]
        seen.add(x)
    return [True, x]

def isPent(n):
    test = is_square(n*24+1)
    if test[0]:
        if (test[1]+1)%6 ==0:
            return True
        else: return False
    else: return False

pents = []

for i in range(1,10000):
    pents.append(makePent(i))

for i in range(0,len(pents)-1):
    for j in range(i+1,len(pents)):
        # if isPent(pents[i]+pents[j]):
        #     print('First condition met: {} + {} = {}'.format(pents[i],pents[j],pents[i]+pents[j]))
        # if isPent(pents[j]-pents[i]):
        #     print('Second condition met: {} - {} = {}'.format(pents[j],pents[i],pents[j]-pents[i]))
        if isPent(pents[i]+pents[j]) and isPent(pents[j]-pents[i]):
            print('Both conditions met: {} + {} = {} and {} - {} = {}'.format(pents[i],pents[j],pents[i]+pents[j],pents[j],pents[i],pents[j]-pents[i]))
            
# Solves at 5482660
# 7042750-1560090 = 5482660
# which is
# P2167 - P1020 =  P192

# Done via brute force, and without analysis of the differce.
# Dumb luck that the first is the lowest.
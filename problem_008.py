#problem 8

'''

The four adjacent digits in the 1000-digit number that have the greatest product are 9 × 9 × 8 × 9 = 5832.

73167176531330624919225119674426574742355349194934
96983520312774506326239578318016984801869478851843
85861560789112949495459501737958331952853208805511
12540698747158523863050715693290963295227443043557
66896648950445244523161731856403098711121722383113
62229893423380308135336276614282806444486645238749
30358907296290491560440772390713810515859307960866
70172427121883998797908792274921901699720888093776
65727333001053367881220235421809751254540594752243
52584907711670556013604839586446706324415722155397
53697817977846174064955149290862569321978468622482
83972241375657056057490261407972968652414535100474
82166370484403199890008895243450658541227588666881
16427171479924442928230863465674813919123162824586
17866458359124566529476545682848912883142607690042
24219022671055626321111109370544217506941658960408
07198403850962455444362981230987879927244284909188
84580156166097919133875499200524063689912560717606
05886116467109405077541002256983155200055935729725
71636269561882670428252483600823257530420752963450

Find the thirteen adjacent digits in the 1000-digit number that have the greatest product. What is the value of this product?
'''

str_01 = '73167176531330624919225119674426574742355349194934'
str_02 = '96983520312774506326239578318016984801869478851843'
str_03 = '85861560789112949495459501737958331952853208805511'
str_04 = '12540698747158523863050715693290963295227443043557'
str_05 = '66896648950445244523161731856403098711121722383113'
str_06 = '62229893423380308135336276614282806444486645238749'
str_07 = '30358907296290491560440772390713810515859307960866'
str_08 = '70172427121883998797908792274921901699720888093776'
str_09 = '65727333001053367881220235421809751254540594752243'
str_10 = '52584907711670556013604839586446706324415722155397'
str_11 = '53697817977846174064955149290862569321978468622482'
str_12 = '83972241375657056057490261407972968652414535100474'
str_13 = '82166370484403199890008895243450658541227588666881'
str_14 = '16427171479924442928230863465674813919123162824586'
str_15 = '17866458359124566529476545682848912883142607690042'
str_16 = '24219022671055626321111109370544217506941658960408'
str_17 = '07198403850962455444362981230987879927244284909188'
str_18 = '84580156166097919133875499200524063689912560717606'
str_19 = '05886116467109405077541002256983155200055935729725'
str_20 = '71636269561882670428252483600823257530420752963450'

mega_str = str_01 + str_02 + str_03 + str_04 + str_05 + str_06 + str_07 + str_08 + str_09 + str_10 \
     + str_11 + str_12 + str_13 + str_14 + str_15 + str_16 + str_17 + str_18 + str_19 + str_20

maxp = 0

for i in range(0,len(mega_str)-13):
    p =   int(mega_str[i]) * int(mega_str[i+1]) *  int(mega_str[i+2]) *\
        int(mega_str[i+3]) * int(mega_str[i+4]) *  int(mega_str[i+5]) *\
        int(mega_str[i+6]) * int(mega_str[i+7]) *  int(mega_str[i+8]) *\
        int(mega_str[i+9]) * int(mega_str[i+10]) * int(mega_str[i+11]) *int( mega_str[i+12])
    if p > maxp:
        maxp = p
print(maxp)